name: Deploy To Google Play

on:
  push:
    branches: [master]

jobs:
  test:
    name: Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew clean testDebug

  distribute:
    name: Distribute bundle to Google Play
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Version Bump
        uses: chkfung/android-version-actions@v1.2.3
        with:
          gradlePath: app/build.gradle.kts
          versionCode: ${{ github.run_number }}

      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew

      - name: Assemble Release Bundle
        run: ./gradlew bundleRelease

      - name: Sign Release
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNING_STORE_FILE_BASE64 }}
          keyStorePassword: ${{ secrets.SIGNING_STORE_PASSWORD }}
          alias: ${{ secrets.SIGNING_KEY_ALIAS }}
          keyPassword: ${{ secrets.SIGNING_KEY_PASSWORD }}

      - name: Setup Authorization with Google Play Store
        run: echo '${{ secrets.PLAY_KEY }}' > service_account.json

      - name: Deploy bundle to Google Play
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_KEY }}
          packageName: com.codetaker.ammusic
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          track: 'internal'
          status: 'completed'
          whatsNewDirectory: whatsNew/

      # Telegram Notification (Success)
      - name: Notify Telegram (Success)
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="✅ Android Build & Upload Success!
          Project: ${{ github.repository }}
          Run: #${{ github.run_number }}
          Track: internal"

      # Telegram Notification (Failure)
      - name: Notify Telegram (Failure)
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="❌ Android Build or Upload Failed!
          Project: ${{ github.repository }}
          Run: #${{ github.run_number }}"


      # Discord Notification (Success)
      - name: Notify Discord (Success)
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content":"✅ Android Build & Upload Successful! (.aab uploaded to internal track — Run #${{ github.run_number }})"}' \
          ${{ secrets.DISCORD_WEBHOOK }}

      # Discord Notification (Failure)
      - name: Notify Discord (Failure)
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content":"❌ Build or Upload Failed! Check GitHub Actions — Run #${{ github.run_number }}"}' \
          ${{ secrets.DISCORD_WEBHOOK }}
